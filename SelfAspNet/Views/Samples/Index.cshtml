@* @model IEnumerable<SelfAspNet.Models.Sample> *@
@model X.PagedList.IPagedList<SelfAspNet.Models.Sample>
@using X.PagedList.Mvc.Core

@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>
<p>
    @ViewBag.CreateResult
</p>
<p>
    <a asp-action="Cookie">Cookieサンプル</a>
</p>
<p>
    <a asp-action="Session">Sessionサンプル</a>
</p>
<p>
    <a asp-action="Json">Sessionのシリアライズのサンプル</a>
</p>
<p>
    <a asp-action="Create">Create New</a>
</p>
<p>@ViewBag.Mes</p>
@* キャッシュテストの現在時刻：ResponseCacheがある場合にページ遷移で時刻が変わらない(F5リロードの場合は変わる) *@
<p>@DateTime.Now.ToString()</p>

@* asp-append-versionで画像のキャッシュをクリアして更新されない問題を解決できる *@
@* 画像はwwwroot配下に設置する *@
<img src="~/images/rengoku.png" alt="rengoku.png" asp-append-version="true"/>

<table class="table">
    <thead>
        <tr>
            <th>
                @* これはデータが型に合わせてある程度最適な形で整形してくれるらしい(XSSなど防げる+カスタマイズ可能) *@
                @* また、カラム名もforeach使わずに参照できるので、これを使うのが一般的 *@
                @* なおmodelという引数はmでもなんでも良い *@

                @* modelの型がページネーションのプラグインの影響で変更になりX.PagedList.IPagedListになったので、 First()を追加しないと参照エラーになる*@
                @Html.DisplayNameFor(model => model.First().Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.First().SubTitle)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SubTitle)
            </td>
            <td>
                @* 【リンク生成】タグヘルパー：asp-actionとasp-route-idについて*@
                @* アクションとidを指定したリンクが自動で作成できる *@
                @* 作成結果例：<a href="/Samples/Edit/1">Edit</a>  *@

                @* asp-xxxxといういろんなリンク生成のメソッドがあるので、何かに関連したリンクを生成するときは利用する *@
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
<!-- ✅ Nugetのページネイション用ライブラリ：自動ページネーションUI -->
<div>
    @Html.PagedListPager(Model, page => Url.Action("Index", new { page }),
    @* 今回CSSはデフォルトで反映してて、特に触ってないが、Nugetのページネイション用ライブラリでHtml生成したらCSS反映しなかった *@
    @* そのため、new PagedListRenderOptionsでCSS反映をした *@
    @* new PagedListRenderOptionsは独特すぎて使いにくい。柔軟な対応は難しい印象 *@
    new PagedListRenderOptions
    {
        LiElementClasses = new string[] { "page-item" }, // <li> 要素のクラス
        PageClasses = new string[] { "page-link" },      // <a> 要素のクラス
        ActiveLiElementClass = "active",                // アクティブな <li> 要素のクラス
        // 他にも様々なオプションがあります
        // 例えば、PreviousPageText, NextPageText, DisplayPageCount など
        // 必要に応じてカスタマイズしてください。
    })
</div>
